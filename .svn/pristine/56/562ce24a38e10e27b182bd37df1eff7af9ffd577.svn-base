package com.ivo.hibernate.acode;

import java.sql.Timestamp;
import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.criterion.Example;

import com.ivo.hibernate.BaseHibernateDAO;

/**
 * A data access object (DAO) providing persistence and search support for Acode
 * entities. Transaction control of the save(), update() and delete() operations
 * can directly support Spring container-managed transactions or they can be
 * augmented to handle user-managed Spring transactions. Each of these methods
 * provides additional information for how to configure it for the desired type
 * of transaction control.
 * 
 * @see com.ivo.hibernate.acode.Acode
 * @author MyEclipse Persistence Tools
 */

public class AcodeDAO extends BaseHibernateDAO {
	private static final Log log = LogFactory.getLog(AcodeDAO.class);
	// property constants
	public static final String SUBITEM = "subitem";
	public static final String CODE_DSC = "codeDsc";
	public static final String EXT1 = "ext1";
	public static final String EXT2 = "ext2";
	public static final String EXT3 = "ext3";
	public static final String EXT4 = "ext4";
	public static final String EXT5 = "ext5";
	public static final String SEQUENCE = "sequence";

	public void save(Acode transientInstance) {
		log.debug("saving Acode instance");
		try {
			getSession().save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	public void delete(Acode persistentInstance) {
		log.debug("deleting Acode instance");
		try {
			getSession().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public Acode findById(com.ivo.hibernate.acode.AcodeId id) {
		log.debug("getting Acode instance with id: " + id);
		try {
			Acode instance = (Acode) getSession().get(
					"com.ivo.hibernate.acode.Acode", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List findByExample(Acode instance) {
		log.debug("finding Acode instance by example");
		try {
			List results = getSession().createCriteria(
					"com.ivo.hibernate.acode.Acode").add(
					Example.create(instance)).list();
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public List findByProperty(String propertyName, Object value) {
		log.debug("finding Acode instance with property: " + propertyName
				+ ", value: " + value);
		try {
			String queryString = "from Acode as model where model."
					+ propertyName + "= ?";
			Query queryObject = getSession().createQuery(queryString);
			queryObject.setParameter(0, value);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	public List findBySubitem(Object subitem) {
		return findByProperty(SUBITEM, subitem);
	}

	public List findByCodeDsc(Object codeDsc) {
		return findByProperty(CODE_DSC, codeDsc);
	}

	public List findByExt1(Object ext1) {
		return findByProperty(EXT1, ext1);
	}

	public List findByExt2(Object ext2) {
		return findByProperty(EXT2, ext2);
	}

	public List findByExt3(Object ext3) {
		return findByProperty(EXT3, ext3);
	}

	public List findByExt4(Object ext4) {
		return findByProperty(EXT4, ext4);
	}

	public List findByExt5(Object ext5) {
		return findByProperty(EXT5, ext5);
	}

	public List findBySequence(Object sequence) {
		return findByProperty(SEQUENCE, sequence);
	}

	public List findAll() {
		log.debug("finding all Acode instances");
		try {
			String queryString = "from Acode";
			Query queryObject = getSession().createQuery(queryString);
			return queryObject.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	public Acode merge(Acode detachedInstance) {
		log.debug("merging Acode instance");
		try {
			Acode result = (Acode) getSession().merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public void attachDirty(Acode instance) {
		log.debug("attaching dirty Acode instance");
		try {
			getSession().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(Acode instance) {
		log.debug("attaching clean Acode instance");
		try {
			getSession().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}
}